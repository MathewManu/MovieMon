CREATE TABLE USERS(
ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
USERNAME VARCHAR(20) NOT NULL,
PASSWORD VARCHAR(20) NOT NULL,
PRIMARY KEY(ID)
);

INSERT INTO USERS (USERNAME, PASSWORD) VALUES ('GUEST','GUEST');
    
CREATE TABLE MOVIE
(
ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
FILENAME VARCHAR(255) NOT NULL,
FILELOCATION VARCHAR(255) NOT NULL,
TITLE VARCHAR(255) NOT NULL,
YEAR VARCHAR(10) NOT NULL,
IMDBRATING VARCHAR(10) NOT NULL,
IMDBID VARCHAR(20) NOT NULL,
GENRE VARCHAR(100),
POSTER VARCHAR(150),
LANGUAGE VARCHAR(100),
PLOT VARCHAR(255),
RUNTIME VARCHAR(10),
DIRECTOR VARCHAR(100),
ACTORS VARCHAR(255),
PRIMARY KEY (ID),
UNIQUE (IMDBID, FILELOCATION),
);

-- usreid - movie details are present in this table
CREATE TABLE USER_MOVIES
(
USERID INTEGER NOT NULL,
MOVIE_ID INTEGER NOT NULL,
FOREIGN KEY(MOVIE_ID) REFERENCES MOVIE(ID),
FOREIGN KEY(USERID) REFERENCES USERS(ID)
);

-- Need to add if anything required in this table. would help If we are going to schedule scan for a particular user
CREATE TABLE SCAN_DETAILS
(
USERID INTEGER NOT NULL,
FILELOCATION VARCHAR(255) NOT NULL,
FOREIGN KEY(USERID) REFERENCES USERS(ID)
);

-- This table would help If we later add schedule scan or something
CREATE TABLE RECENTLY_ADDED_MOVIES 
(
ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
MOVIE_ID INTEGER,
PRIMARY KEY(ID),
FOREIGN KEY(MOVIE_ID) REFERENCES MOVIE(ID)
);

CREATE TABLE DUP_MOVIES
(
ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
MOVIE_ID INTEGER,
IMDBID VARCHAR(20) NOT NULL,
FILELOCATION VARCHAR(255) NOT NULL,
PRIMARY KEY(ID),
FOREIGN KEY(MOVIE_ID) REFERENCES MOVIE(ID)
);

CREATE TABLE FAILED_MOVIES(
ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
FILELOCATION VARCHAR(255) NOT NULL,
PRIMARY KEY(ID)
);

CREATE TABLE FAVORITES(
ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
MOVIE_ID INTEGER,
USER_ID INTEGER,
PRIMARY KEY(ID),
FOREIGN KEY(MOVIE_ID) REFERENCES MOVIE(ID),
FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
);
